# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-01-02 16:51
from __future__ import unicode_literals

import comicagg.comics.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', comicagg.comics.fields.ComicNameField(max_length=255, verbose_name='Nombre del comic')),
                ('website', models.URLField(verbose_name='Página del comic')),
                ('activo', models.BooleanField(default=False, verbose_name='Comic activo')),
                ('notify', models.BooleanField(default=False, help_text='Siempre va a aparecer como desactivado aquí. Si se activa, se notifica y se deja la opción desactivada', verbose_name='Notificar comic nuevo a los usuarios')),
                ('ended', models.BooleanField(default=False, help_text='Si un comic termina marcar esta opción y desactivarlo también', verbose_name='Comic terminado')),
                ('noimages', models.BooleanField(default=False, help_text='Si no se pueden mostrar las imágenes del comic, marcar para que únicamente salga un texto indicando que se ha actualizado', verbose_name='No mostrar imágenes')),
                ('custom_func', models.TextField(blank=True, help_text='Mirar la <a href="/docs/custom_func/">documentación</a>.', null=True, verbose_name='Función personalizada')),
                ('url', models.URLField(blank=True, help_text='Si hay redirección no se utiliza', null=True, verbose_name='Url donde se encuentra la imagen')),
                ('base_img', models.CharField(blank=True, help_text='Debe contener %s que es donde se pondrá lo capturado por la expresión regular', max_length=255, null=True, verbose_name='Url base de la imagen')),
                ('regexp', models.CharField(blank=True, help_text='Lo que se quiera capturar se pone <b>entre paréntesis</b>.<br/>Si hace falta usar paréntesis para capturar, se toma como url lo que vaya aquí dentro <b>(?P&lt;url><i>RE de captura</i>)</b>.<br/>Para capturar el texto alternativo, usar la siguiente construcción <b>(?P&lt;alt><i>RE de captura</i>)</b>.', max_length=255, null=True, verbose_name='Expresión regular')),
                ('backwards', models.BooleanField(default=False, verbose_name='Empezar desde el final')),
                ('url2', models.URLField(blank=True, help_text='Si se pone algo aquí se usa redirección', null=True, verbose_name='Url donde se encuentra la dirección que contiene la imagen')),
                ('base2', models.CharField(blank=True, help_text='Debe contener %s que es donde se pondrá lo capturado por la expresión regular', max_length=255, null=True, verbose_name='Url base')),
                ('regexp2', models.CharField(blank=True, help_text='Lo que se quiera capturar se pone <b>entre paréntesis</b>. Si hace falta usar paréntesis para capturar, se toma como url lo que vaya aquí dentro <b>(?P&lt;url><i>RE de captura</i>)</b>', max_length=255, null=True, verbose_name='Expresión regular')),
                ('backwards2', models.BooleanField(default=False, verbose_name='Empezar desde el final')),
                ('referer', models.URLField(blank=True, help_text='Si la web del comic comprueba el referer poner aquí alguno para que no dé error', null=True, verbose_name='Referer')),
                ('fake_user_agent', models.BooleanField(default=False, help_text='Si además la web comprueba el User-Agent marcar para conectarse a la web usando otro User-Agent', verbose_name='Cambiar User-Agent')),
                ('last_check', models.DateTimeField(blank=True, verbose_name='Última actualización')),
                ('last_image', models.URLField(blank=True, verbose_name='Última imagen')),
                ('last_image_alt_text', comicagg.comics.fields.AltTextField(blank=True, null=True, verbose_name='Texto alternativo')),
                ('rating', models.IntegerField(default=0, verbose_name='Votos positivos')),
                ('votes', models.IntegerField(default=0, verbose_name='Votos totales')),
                ('add_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'permissions': (('all_images', 'Can see all images'),),
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ComicHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('url', models.CharField(max_length=255)),
                ('alt_text', comicagg.comics.fields.AltTextField(blank=True, null=True, verbose_name='Texto alternativo')),
                ('comic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='comics.Comic')),
            ],
            options={
                'get_latest_by': 'date',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='NewComic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='new_comics', to='comics.Comic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('comment', models.TextField(blank=True, default='', null=True)),
                ('admin_comment', models.TextField(blank=True, default='', null=True)),
                ('done', models.BooleanField(default=False)),
                ('rejected', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['id', '-done'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(blank=True, default=0)),
                ('comic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='comics.Comic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user', 'position'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('comic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='comics.Comic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name', 'comic'],
            },
        ),
        migrations.CreateModel(
            name='UnreadComic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='comics.Comic')),
                ('history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='comics.ComicHistory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user', '-history'],
            },
        ),
    ]
