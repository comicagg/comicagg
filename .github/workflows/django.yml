name: Build Django image

on:
  push:
    branches: ["development"]
#   pull_request:
#     branches: [ "development" ]
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: nublar.azurecr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: comicagg/app

jobs:
  build:
    env:
      DJANGO_SECRET_KEY: this-is-just-for-building
      DJANGO_DATABASE: sqlite3://comicagg:comicagg@db:5432/tmp/comicagg.db
      DJANGO_MEDIA_ROOT: /web/media/
      DJANGO_MEDIA_URL: /.media/
      DJANGO_STATIC_ROOT: /tmp/static/
      DJANGO_STATIC_URL: /.static/
      DJANGO_ADMINS: Admin <admin@comicagg.com>
      DJANGO_MANAGERS: Admin <admin@comicagg.com>
      DJANGO_EMAIL_HOST: //comicagg:comicagg@smtp
      DJANGO_DEFAULT_FROM_EMAIL: robot@comicagg.com
      DJANGO_SERVER_EMAIL: robot@comicagg.com
      DJANGO_LOGS_DIR: /tmp/log/comicagg
      DJANGO_SITE_DOMAIN: https://www.comicagg.com
      CELERY_BROKER_URL: redis://redis:6379
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Tests
        run: |
          python -Wa manage.py test --noinput --failfast comicagg.comics
      - name: Collect static files
        run: |
          mkdir -p $DJANGO_STATIC_ROOT
          python manage.py collectstatic --noinput
      # - name: Build the Docker image
        # run: docker build . --file Dockerfile
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      # - name: Extract Docker metadata
      #   id: meta
      #   uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          # tags: ${{ steps.meta.outputs.tags }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGEN_NAME }}:test
          # labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
