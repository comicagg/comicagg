name: ci

on:
  push:
    branches: ["development"]
    tags: ["v*"]
#   pull_request:
#     branches: [ "development" ]
  workflow_dispatch:

env:
  REGISTRY: nublar.azurecr.io
  APP_IMAGE_NAME: comicagg/app
  PROXY_IMAGE_NAME: comicagg/proxy
  PYTHON_VERSION: 3.12

jobs:
  build:
    env:
      DJANGO_SECRET_KEY: this-is-just-for-building
      DJANGO_DATABASE: sqlite3://comicagg:comicagg@db:5432/tmp/comicagg.db
      DJANGO_MEDIA_ROOT: /web/media/
      DJANGO_MEDIA_URL: /.media/
      DJANGO_STATIC_ROOT: /tmp/nginx/static/
      DJANGO_STATIC_URL: /.static/
      DJANGO_ADMINS: Admin <admin@comicagg.com>
      DJANGO_MANAGERS: Admin <admin@comicagg.com>
      DJANGO_EMAIL_HOST: //comicagg:comicagg@smtp
      DJANGO_DEFAULT_FROM_EMAIL: robot@comicagg.com
      DJANGO_SERVER_EMAIL: robot@comicagg.com
      DJANGO_LOGS_DIR: /tmp/log/comicagg
      DJANGO_SITE_DOMAIN: https://www.comicagg.com
      CELERY_BROKER_URL: redis://redis:6379
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          python -Wa manage.py test --noinput --failfast comicagg.comics

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata for APP image
        id: image-metadata-app
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=match,pattern=\d{6}\.\d+

      - name: Build and push APP
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-metadata-app.outputs.tags }}
          # tags: ${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}:test
          # labels: ${{ steps.image-metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Collect static files and prepare PROXY image
        run: |
          mkdir -p $DJANGO_STATIC_ROOT
          python manage.py collectstatic --noinput
          ls -l /tmp/nginx/static/
          cp ../deployment/nginx/* /tmp/nginx/

      - name: Extract metadata for PROXY image
        id: image-metadata-proxy
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROXY_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=match,pattern=\d{6}\.\d+

      - name: Build and push PROXY image
        id: build-and-push-nginx
        uses: docker/build-push-action@v5
        with:
          context: /tmp/nginx/
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-metadata-proxy.outputs.tags }}
          # tags: ${{ env.REGISTRY }}/${{ env.PROXY_IMAGE_NAME }}:test
          # labels: ${{ steps.image-metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
